(function () {
    // document.addEventListener("DOMContentLoaded", async function () {
    //     // Check if the URL matches the species page pattern
    //     const match = window.location.pathname.match(/^\/species\/([^\/]+)\/?$/);
    //     if (!match) return;

    //     // Get the species name from the URL
    //     let speciesName = decodeURIComponent(match[1]);
        
    //     // Get Singapore time
    //     let now = new Date();
    //     let singaporeTime = new Date(now.toLocaleString("en-US", { timeZone: "Asia/Singapore" }));
    //     if (!(singaporeTime.getFullYear() === 2025 && 
    //           singaporeTime.getMonth() === 3 && // April (zero-based index)
    //           singaporeTime.getDate() === 1)) {
    //         return;
    //     }

    //     // Convert species name to species_slug
    //     let speciesSlug = speciesName
    //         .replace(/'/g, "") // Remove apostrophes
    //         .replace(/\s+/g, "-") // Replace spaces with hyphens
    //         .toLowerCase();
        
    //     let imageUrl = `https://singaporebirds.com/wp-content/uploads/aprfools/${speciesSlug}.jpg`;

    //     // Check if the image exists
    //     try {
    //         let response = await fetch(imageUrl, { method: 'HEAD' });
    //         if (!response.ok) return;
    //     } catch (error) {
    //         return;
    //     }

    //     // Fetch the metadata JSON file
    //     let metadataResponse = await fetch("https://singaporebirds.com/wp-content/uploads/aprfools/metadata.json");
    //     if (!metadataResponse.ok) return;
    //     let metadata = await metadataResponse.json();

    //     console.log(metadata);

    //     // Find the corresponding species entry
    //     let imagePrompt = "";
    //     if (metadata && metadata.species) {
    //         const speciesEntry = metadata.species.find(s => 
    //             s.slug.toLowerCase() === speciesName.toLowerCase());
    //         if (speciesEntry) {
    //             imagePrompt = speciesEntry.prompt;
    //         }
    //     }

    //     console.log(imagePrompt);

    //     // If no matching prompt found, exit
    //     if (!imagePrompt) return;

    //     // Find the image with class wp-post-image
    //     let imgElement = document.querySelector("img.wp-post-image");
    //     if (!imgElement) return;

    //     // Create tooltip element for the image prompt
    //     let tooltipTrigger = document.createElement("span");
    //     tooltipTrigger.className = "px-2";
    //     tooltipTrigger.textContent = "Show prompt";
    //     tooltipTrigger.style.cursor = "pointer";
    //     tooltipTrigger.style.backgroundColor = "#f0f0f0";
    //     tooltipTrigger.style.color = "#2196F3";
    //     tooltipTrigger.style.marginLeft = "10px";
    //     tooltipTrigger.setAttribute("data-bs-toggle", "tooltip");
    //     tooltipTrigger.setAttribute("data-bs-placement", "top");
    //     tooltipTrigger.setAttribute("title", imagePrompt);

    //     // Initialize the tooltip
    //     new bootstrap.Tooltip(tooltipTrigger);

    //     // Create a toggle switch container
    //     let toggleContainer = document.createElement("div");
    //     toggleContainer.style.display = "flex";
    //     toggleContainer.style.alignItems = "center";
    //     toggleContainer.style.justifyContent = "flex-start";
    //     toggleContainer.style.width = imgElement.width + "px";
    //     toggleContainer.style.marginBottom = "10px";
    //     // toggleContainer.style.position = "absolute"

    //     let toggleLabel = document.createElement("span");
    //     toggleLabel.style.fontWeight = "bold";
    //     toggleLabel.textContent = "April Fools'";
    //     toggleLabel.style.marginRight = "10px";

    //     let toggleSwitch = document.createElement("label");
    //     toggleSwitch.classList.add("toggle-switch");
    //     toggleSwitch.innerHTML = `
    //         <input type="checkbox" id="ai-toggle" checked>
    //         <span class="slider"></span>
    //     `;

    //     let originalSrc = imgElement.src;
    //     let originalSrcSet = imgElement.srcset;

    //     imgElement.srcset = "";
    //     imgElement.src = imageUrl;
        
    //     toggleSwitch.querySelector("input").addEventListener("change", function () {
    //         imgElement.srcset = this.checked ? "" : originalSrcSet;
    //         imgElement.src = this.checked ? imageUrl : originalSrc;
    //     });

    //     toggleContainer.appendChild(toggleLabel);
    //     toggleContainer.appendChild(toggleSwitch);
    //     toggleContainer.appendChild(tooltipTrigger);
    //     imgElement.parentNode.insertBefore(toggleContainer, imgElement.nextSibling);

    //     // Add styles for the toggle switch
    //     let style = document.createElement("style");
    //     style.innerHTML = `
    //         .toggle-switch {
    //             position: relative;
    //             display: inline-block;
    //             width: 40px;
    //             height: 20px;
    //         }
    //         .toggle-switch input {
    //             opacity: 0;
    //             width: 0;
    //             height: 0;
    //         }
    //         .slider {
    //             position: absolute;
    //             cursor: pointer;
    //             top: 0;
    //             left: 0;
    //             right: 0;
    //             bottom: 0;
    //             background-color: #ccc;
    //             transition: .4s;
    //             border-radius: 20px;
    //         }
    //         .slider:before {
    //             position: absolute;
    //             content: "";
    //             height: 14px;
    //             width: 14px;
    //             left: 3px;
    //             bottom: 3px;
    //             background-color: white;
    //             transition: .4s;
    //             border-radius: 50%;
    //         }
    //         input:checked + .slider {
    //             background-color: #2196F3;
    //         }
    //         input:checked + .slider:before {
    //             transform: translateX(20px);
    //         }
    //     `;
    //     document.head.appendChild(style);

    //     // Create the alert box
    //     let alertBox = document.createElement("div");
    //     alertBox.className = "alert alert-info";

    //     // Set the alert content
    //     alertBox.innerHTML = `
    //         <h6 style="color: #cc0000; margin-top: 0;">Oh no, Birds of Singapore has been taken over by the evil AI overlords!!!</h4>
    //         <p>You might have noticed that some of our bird species cover images have been replaced by bizarre-looking images. 
    //         We're having a little bit of fun since it's April Fools' Day, but you can click the toggle above to display the usual image. 
    //         We'll be posting a related article soon too, watch this space ðŸ˜‰</p>
    //     `;

    //     // Insert the alert before the basic-info section
    //     let basicInfoSection = document.querySelector(".basic-info");
    //     if (basicInfoSection) {
    //         basicInfoSection.parentNode.insertBefore(alertBox, basicInfoSection);
    //     }
    // });

    document.addEventListener("DOMContentLoaded", function () {
        // Select all img elements on the page
        const images = document.querySelectorAll("img");

        images.forEach(img => {
            // Remove "https://i0.wp.com/" from src attribute
            if (img.src.includes("https://i0.wp.com/")) {
                img.src = img.src.replace("https://i0.wp.com/", "https://");
            }

            // Remove "https://i0.wp.com/" from srcset attribute
            if (img.srcset.includes("https://i0.wp.com/")) {
                img.srcset = img.srcset.replace(/https:\/\/i0\.wp\.com\//g, "https://");
            }
        });
    });

    document.addEventListener("DOMContentLoaded", function () {
        // Create modal elements
        const modal = document.createElement("div");
        modal.style.position = "fixed";
        modal.style.top = "0";
        modal.style.left = "0";
        modal.style.width = "100%";
        modal.style.height = "100%";
        modal.style.background = "rgba(0, 0, 0, 0.8)";
        modal.style.display = "none";
        modal.style.justifyContent = "center";
        modal.style.alignItems = "center";
        modal.style.zIndex = "1031";
        modal.style.padding = "30px"; // Add padding around the modal content

        const modalContent = document.createElement("div");
        modalContent.style.position = "relative";
        modalContent.style.display = "flex"; // Use flex to center the image
        modalContent.style.justifyContent = "center";
        modalContent.style.alignItems = "center";
        modalContent.style.maxWidth = "100%";
        modalContent.style.maxHeight = "100%";

        const closeButton = document.createElement("button");
        closeButton.innerHTML = "<i class='fas fa-times'></i>";
        closeButton.style.position = "absolute";
        closeButton.style.top = "-15px";
        closeButton.style.right = "-15px";
        closeButton.style.width = "30px";
        closeButton.style.height = "30px";
        closeButton.style.background = "white";
        closeButton.style.color = "black";
        closeButton.style.border = "none";
        closeButton.style.display = "flex";
        closeButton.style.alignItems = "center";
        closeButton.style.justifyContent = "center";
        closeButton.style.cursor = "pointer";
        closeButton.style.fontSize = "18px";
        closeButton.style.borderRadius = "50%";
        closeButton.style.boxShadow = "0px 2px 5px rgba(0, 0, 0, 0.3)";
        closeButton.style.zIndex = "1032"; // Ensure button is above image

        const modalImg = document.createElement("img");
        modalImg.style.maxWidth = "calc(100vw - 60px)"; // Account for padding
        modalImg.style.maxHeight = "calc(100vh - 60px)"; // Account for padding
        modalImg.style.objectFit = "contain"; // Maintain aspect ratio
        modalImg.style.border = "2px solid white";
        modalImg.style.borderRadius = "8px";
        modalImg.style.display = "block"; // Remove any inline spacing

        closeButton.addEventListener("click", function () {
            modal.style.display = "none";
        });

        modalContent.appendChild(modalImg);
        modalContent.appendChild(closeButton);
        modal.appendChild(modalContent);
        document.body.appendChild(modal);

        // Add keyboard support for closing (Escape key)
        document.addEventListener("keydown", function(event) {
            if (event.key === "Escape" && modal.style.display === "flex") {
                modal.style.display = "none";
            }
        });

        // Close modal on background click
        modal.addEventListener("click", function (event) {
            if (event.target === modal) {
                modal.style.display = "none";
            }
        });

        // Add click event listener to all images inside figures
        document.querySelectorAll("figure img, p img").forEach(img => {
            img.addEventListener("click", function () {
                modalImg.src = img.src;
                modal.style.display = "flex";
            });
        });
    });

    document.addEventListener('DOMContentLoaded', function () {
        // --- START: Your API Data (Ideally, you'd fetch this) ---
        fetch("https://records.singaporebirds.com/api/species/?records=0&review_periods=0&format=json", {
            method: "GET",
            headers: {
                "Authorization": "Api-Key " + SBP_API_KEY,
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error("Network response was not ok " + response.statusText);
            }
            return response.json();
        })
        .then(speciesApiData => {
            console.log("Data received:", speciesApiData);
            const searchInput = document.getElementById('searchGallery');
            const badgeContainer = document.getElementById('filterStatusBadges');
            const galleryItems = document.querySelectorAll('.thumbnail-species');
            const thumbnailGrid = document.querySelector('.thumbnail-grid'); // Parent container
        
            // Create a map for quick lookup of API data by species name
            const speciesDataMap = new Map();
            speciesApiData.forEach(data => {
                speciesDataMap.set(data.species.toLowerCase(), data);
            });
        
            // 1. Populate Statuses Filter
            function populateStatusesFilter() {
                const uniqueStatuses = new Set();
                speciesApiData.forEach(item => {
                    if (item.statuses && item.statuses.length > 0) {
                        item.statuses.forEach(status => uniqueStatuses.add(status));
                    }
                });
            
                const sortedStatuses = Array.from(uniqueStatuses).sort();
            
                sortedStatuses.forEach(status => {
                    const badge = document.createElement('span');
                    badge.className = 'badge rounded-pill bg-primary text-white px-3 py-2 cursor-pointer active';
                    badge.textContent = status;
                    badge.dataset.status = status;
            
                    badge.addEventListener('click', function () {
                        badge.classList.toggle('bg-primary');
                        badge.classList.toggle('bg-secondary');
                        badge.classList.toggle('active');
                        applyFilters(); // Re-apply filters when toggled
                    });
            
                    badgeContainer.appendChild(badge);
                });
            }
        
            // 2. Main Filtering Function
            function applyFilters() {
                const searchTerm = searchInput.value.toLowerCase().trim();
                const selectedStatuses = Array.from(document.querySelectorAll('#filterStatusBadges .badge.active')).map(b => b.dataset.status);
        
                let visibleCount = 0;
        
                galleryItems.forEach(item => {
                    const speciesName = item.dataset.speciesName;
                    if (!speciesName) { // Safety check
                        item.style.display = 'none';
                        return;
                    }
                    const speciesNameLower = speciesName.toLowerCase();
        
                    // Get corresponding API data for this gallery item
                    const apiData = speciesDataMap.get(speciesNameLower);
        
                    let matchesSearch = true;
                    let matchesReview = true;
                    let matchesStatus = true;
        
                    // Filter by search term
                    if (searchTerm) {
                        matchesSearch = speciesNameLower.includes(searchTerm);
                    }
        
                    // Filter by review_species
                    if (apiData && selectedStatuses.length > 0) {
                        matchesStatus = apiData.statuses && apiData.statuses.some(s => selectedStatuses.includes(s));
                    } else if (!apiData && selectedStatuses.length > 0) {
                        matchesStatus = false;
                    }
        
                    if (matchesSearch && matchesReview && matchesStatus) {
                        item.style.display = ''; // Or 'block', 'flex', etc., depending on your CSS
                        visibleCount++;
                    } else {
                        item.style.display = 'none';
                    }
                });
        
                // Optional: Show a "no results" message
                let noResultsMessage = document.getElementById('no-results-message');
                if (visibleCount === 0) {
                    if (!noResultsMessage) {
                        noResultsMessage = document.createElement('p');
                        noResultsMessage.id = 'no-results-message';
                        noResultsMessage.textContent = 'No species found matching your criteria.';
                        noResultsMessage.className = 'text-center mt-3'; // Add some styling
                        // Insert after the filter row, or adjust as needed
                        if (thumbnailGrid.parentNode) {
                            // Insert before the thumbnail grid
                            thumbnailGrid.parentNode.insertBefore(noResultsMessage, thumbnailGrid);
                        }
                    }
                    noResultsMessage.style.display = 'block';
                } else {
                    if (noResultsMessage) {
                        noResultsMessage.style.display = 'none';
                    }
                }
            }
        
            // 3. Event Listeners
            searchInput.addEventListener('input', applyFilters);
            badgeContainer.addEventListener('change', applyFilters);
        
            // 4. Initial setup
            populateStatusesFilter();
            applyFilters(); // Apply filters on page load (e.g., if any default is set or just to initialize)
        })
        .catch(error => {
            console.error("Fetch error:", error);
        });

    });

})();